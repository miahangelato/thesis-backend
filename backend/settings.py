"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# LOAD ENVIRONMENT VARIABLES FROM .env FILE
try:
    from dotenv import load_dotenv
    env_file = BASE_DIR / '.env'
    load_dotenv(env_file)

except ImportError:

    import subprocess
    import sys
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'python-dotenv'])
    from dotenv import load_dotenv
    env_file = BASE_DIR / '.env'
    load_dotenv(env_file)
  

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'your-default-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Secure ALLOWED_HOSTS for production
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.herokuapp.com',  # Allow all Heroku subdomains
    '.ngrok-free.app',  # For development testing
    '.ngrok.io',  # For development testing
]

# Add your specific Heroku app domain when you create it
# ALLOWED_HOSTS.append('your-app-name.herokuapp.com')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'core',
    'storages'

]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database - PostgreSQL for production (Heroku), SQLite for development
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use DATABASE_URL from Heroku if available, otherwise use local PostgreSQL
import dj_database_url

if os.getenv('DATABASE_URL'):
    # Production database (Heroku PostgreSQL)
    DATABASES = {
        'default': dj_database_url.parse(os.getenv('DATABASE_URL'))
    }
else:
    # Local development database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



CORS_ALLOW_CREDENTIALS = True


AWS_LOCATION = 'static'
AWS_MEDIA_LOCATION = 'media'

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static_my_project",
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static', 'static_root')

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media', 'media_root')

# AWS S3 Security Configuration - ENHANCED FOR ENCRYPTION
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN')
AWS_S3_FILE_OVERWRITE = os.getenv('AWS_S3_FILE_OVERWRITE', 'False') == 'True'

# FORCE ENCRYPTION - This ensures all uploads are encrypted
AWS_DEFAULT_ACL = 'private'  # Make all files private by default
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',  # Cache for 24 hours
    'ServerSideEncryption': 'AES256',  # FORCE ENCRYPTION ON EVERY UPLOAD
    'ACL': 'private',  # Force private ACL
    'ContentDisposition': 'attachment',  # Force download instead of inline viewing
    'Metadata': {
        'uploaded-by': 'fingerprint-app',
        'security-level': 'high',
        'content-policy': 'restricted'
    }
}
AWS_S3_USE_SSL = True  # Force HTTPS
AWS_S3_VERIFY = True  # Verify SSL certificates
AWS_QUERYSTRING_AUTH = True  # Use signed URLs for access
AWS_QUERYSTRING_EXPIRE = 1800  # URLs expire after 30 minutes (more secure)
AWS_S3_SIGNATURE_VERSION = 's3v4'  # Use latest signature version

# Additional Security
AWS_PRELOAD_METADATA = True
AWS_S3_ADDRESSING_STYLE = 'virtual'

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "location": AWS_MEDIA_LOCATION,
            "default_acl": AWS_DEFAULT_ACL,
            "querystring_auth": AWS_QUERYSTRING_AUTH,
            "querystring_expire": AWS_QUERYSTRING_EXPIRE,
            "object_parameters": AWS_S3_OBJECT_PARAMETERS,
            "use_ssl": AWS_S3_USE_SSL,
            "signature_version": AWS_S3_SIGNATURE_VERSION,
            "addressing_style": AWS_S3_ADDRESSING_STYLE,
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
        "OPTIONS": {
            "location": AWS_LOCATION,
            "default_acl": 'public-read',  # Static files can be public
            "querystring_auth": False,  # Static files don't need signing
        },
    },
}


# Security Settings - Enhanced for Production
SECURE_SSL_REDIRECT = not DEBUG and not os.getenv('DISABLE_SSL_REDIRECT')  # Allow disabling for testing
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year HSTS
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Force HTTPS proxy headers (required for Heroku)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Trust Heroku's proxy
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

# Session Security
SESSION_COOKIE_SECURE = not DEBUG  # HTTPS only in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# CSRF Protection
CSRF_COOKIE_SECURE = not DEBUG  # HTTPS only in production
CSRF_COOKIE_HTTPONLY = True
CSRF_USE_SESSIONS = True

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644
DATA_UPLOAD_MAX_NUMBER_FIELDS = 100

CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in development

# Production CORS settings
if not DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "https://your-frontend-domain.com",  # Replace with your actual frontend domain
        "https://your-app-name.herokuapp.com",  # Your Heroku app domain
    ]
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_ALL_ORIGINS = False
else:
    # Development CORS settings
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

# Logging Configuration for Security
import os
# Ensure logs directory exists
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# Determine log levels based on environment
if os.environ.get('RAILWAY_DEPLOYMENT') == 'True':
    # Production logging - reduce verbosity to avoid Railway rate limits
    DJANGO_LOG_LEVEL = os.environ.get('DJANGO_LOG_LEVEL', 'WARNING')
    CORE_LOG_LEVEL = os.environ.get('CORE_LOG_LEVEL', 'WARNING')
    ROOT_LOG_LEVEL = os.environ.get('ROOT_LOG_LEVEL', 'WARNING')
else:
    # Development logging - more verbose
    DJANGO_LOG_LEVEL = os.environ.get('DJANGO_LOG_LEVEL', 'INFO')
    CORE_LOG_LEVEL = os.environ.get('CORE_LOG_LEVEL', 'DEBUG')
    ROOT_LOG_LEVEL = os.environ.get('ROOT_LOG_LEVEL', 'INFO')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': [] if os.environ.get('RAILWAY_DEPLOYMENT') == 'True' else ['require_debug_true'],
        },
        'throttled_console': {
            'level': 'WARNING',  # Only WARNING and above in production
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['throttled_console' if os.environ.get('RAILWAY_DEPLOYMENT') == 'True' else 'console'],
        'level': ROOT_LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['throttled_console' if os.environ.get('RAILWAY_DEPLOYMENT') == 'True' else 'console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False,
        },
        'core': {
            'handlers': ['throttled_console' if os.environ.get('RAILWAY_DEPLOYMENT') == 'True' else 'console'],
            'level': CORE_LOG_LEVEL,
            'propagate': False,
        },
    },
}

# Add file logging only in production (when not DEBUG)
if not DEBUG:
    # Use RotatingFileHandler to prevent large log files
    LOGGING['handlers']['file'] = {
        'level': 'WARNING',  # Only log warnings and above to file
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': LOGS_DIR / 'security.log',
        'formatter': 'verbose',
        'maxBytes': 5 * 1024 * 1024,  # 5 MB per file
        'backupCount': 3,  # Keep 3 backup files
    }
    # Add file handler to existing loggers
    for logger_name in ['django', 'core']:
        LOGGING['loggers'][logger_name]['handlers'].append('file')
